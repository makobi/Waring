# This file was *autogenerated* from the file waring.sage.
from sage.all_cmdline import *   # import sage library
_sage_const_1 = Integer(1); _sage_const_0 = Integer(0)
r"""
Waring numbers over finite fields of the form 'Zp'

Waring's number is the minimum amount of variables needed such that the 
diagonal equation of the form x_1^d + ... + x_n^d has solution for every
element nin Z_p. That is x_1^d + ... + x_n^d = {0, ... , p-1}.
...

AUTHORS:

- Alex D. Santos Sosa (2013-11-24): initial version
...

Examples:

Waring number for p = 5 and d = 2::

sage: waring(5, 2)
2

"""

#*****************************************************************************
#       Copyright (C) 2010 YOUR NAME <your email>
#
#  Distributed under the terms of the GNU General Public License (GPL)
#  as published by the Free Software Foundation; either version 2 of
#  the License, or (at your option) any later version.
#                  http://www.gnu.org/licenses/
#*****************************************************************************

# Waring Numbers Module

def waring(p, d):
    finite_field = GF(p) # Create finite field
    solutions = [] # Holds the solutions
    waring_number = _sage_const_1  # This is the waring number for (p,d)
    BUFFER = [] # Holds the new solutions while 'solutions' is in use

    for k in finite_field: # Find the solutions for one variable
    	current = (k**d)%p
    	if not (current in solutions):
    		solutions.append(current)

    while not len(solutions) == p: # Find solutions for more than one variable
        for i in range (_sage_const_0 , len(solutions)):
            current = (k**d)%p
            if not (current in solutions):
                BUFFER.append(current) # Save new solutions to BUFFER
        solutions.extend(BUFFER) # Save new solutions 
        BUFFER = []
        waring_number += _sage_const_1 

   

    if len(solutions) == p:
    	print waring_number
